{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0440\\u044D\\u0443\\\\\\u0440\\u0440\\u043F\\\\\\u0442\\u0430\\u0431\\u043B\\u043E1_ui\\\\flight-board-ui\\\\src\\\\components\\\\FlightList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FlightList = ({\n  type\n}) => {\n  _s();\n  const [flights, setFlights] = useState([]);\n\n  // Загрузка списка рейсов при монтировании компонента\n  useEffect(() => {\n    const loadFlights = async () => {\n      try {\n        // Определяем endpoint в зависимости от типа рейсов\n        const endpoint = type === 'departure' ? '/api/flight/all' : '/api/arrivalflight/all';\n        const response = await axios.get(endpoint);\n        setFlights(response.data);\n        console.log('Данные рейсов:', response.data); // Логируем данные для отладки\n      } catch (error) {\n        console.error('Ошибка при загрузке списка рейсов:', error);\n        alert('Ошибка при загрузке списка рейсов. Проверьте консоль для подробностей.');\n      }\n    };\n    loadFlights();\n  }, [type]); // Зависимость от type, чтобы список обновлялся при изменении типа\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: type === 'departure' ? 'Список вылетающих рейсов' : 'Список рейсов на прилет'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), flights.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0420\\u0435\\u0439\\u0441\\u043E\\u0432 \\u043D\\u0435\\u0442.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: flights.map(flight => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: type === 'departure' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"\\u0420\\u0435\\u0439\\u0441 \", flight.flightId, \": \", flight.cityFrom, \" \\u2192 \", flight.cityTo, \" (\\u0412\\u044B\\u043B\\u0435\\u0442: \", new Date(flight.departureTime).toLocaleTimeString(), \")\"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"\\u0420\\u0435\\u0439\\u0441 \", flight.flightId, \": \", flight.departureCity, \" \\u2192 \", flight.arrivalCity, \" (\\u041F\\u0440\\u0438\\u043B\\u0435\\u0442: \", new Date(flight.arrivalTime).toLocaleTimeString(), \")\"]\n        }, void 0, true)\n      }, flight.flightId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(FlightList, \"YkaBEB7rvMCgao95TwXfNB7bv6I=\");\n_c = FlightList;\nexport default FlightList;\nvar _c;\n$RefreshReg$(_c, \"FlightList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","FlightList","type","_s","flights","setFlights","loadFlights","endpoint","response","get","data","console","log","error","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","flight","flightId","cityFrom","cityTo","Date","departureTime","toLocaleTimeString","departureCity","arrivalCity","arrivalTime","_c","$RefreshReg$"],"sources":["C:/рэу/ррп/табло1_ui/flight-board-ui/src/components/FlightList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst FlightList = ({ type }) => {\r\n    const [flights, setFlights] = useState([]);\r\n\r\n    // Загрузка списка рейсов при монтировании компонента\r\n    useEffect(() => {\r\n        const loadFlights = async () => {\r\n            try {\r\n                // Определяем endpoint в зависимости от типа рейсов\r\n                const endpoint = type === 'departure' ? '/api/flight/all' : '/api/arrivalflight/all';\r\n                const response = await axios.get(endpoint);\r\n                setFlights(response.data);\r\n                console.log('Данные рейсов:', response.data); // Логируем данные для отладки\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке списка рейсов:', error);\r\n                alert('Ошибка при загрузке списка рейсов. Проверьте консоль для подробностей.');\r\n            }\r\n        };\r\n        loadFlights();\r\n    }, [type]); // Зависимость от type, чтобы список обновлялся при изменении типа\r\n\r\n    return (\r\n        <div>\r\n            <h3>{type === 'departure' ? 'Список вылетающих рейсов' : 'Список рейсов на прилет'}</h3>\r\n            {flights.length === 0 ? (\r\n                <p>Рейсов нет.</p>\r\n            ) : (\r\n                <ul>\r\n                    {flights.map((flight) => (\r\n                        <li key={flight.flightId}>\r\n                            {type === 'departure' ? (\r\n                                <>\r\n                                    Рейс {flight.flightId}: {flight.cityFrom} → {flight.cityTo} (Вылет: {new Date(flight.departureTime).toLocaleTimeString()})\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    Рейс {flight.flightId}: {flight.departureCity} → {flight.arrivalCity} (Прилет: {new Date(flight.arrivalTime).toLocaleTimeString()})\r\n                                </>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FlightList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA;QACA,MAAMC,QAAQ,GAAGL,IAAI,KAAK,WAAW,GAAG,iBAAiB,GAAG,wBAAwB;QACpF,MAAMM,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACF,QAAQ,CAAC;QAC1CF,UAAU,CAACG,QAAQ,CAACE,IAAI,CAAC;QACzBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1DC,KAAK,CAAC,wEAAwE,CAAC;MACnF;IACJ,CAAC;IACDR,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACIJ,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EAAKb,IAAI,KAAK,WAAW,GAAG,0BAA0B,GAAG;IAAyB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACvFf,OAAO,CAACgB,MAAM,KAAK,CAAC,gBACjBtB,OAAA;MAAAiB,QAAA,EAAG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAElBrB,OAAA;MAAAiB,QAAA,EACKX,OAAO,CAACiB,GAAG,CAAEC,MAAM,iBAChBxB,OAAA;QAAAiB,QAAA,EACKb,IAAI,KAAK,WAAW,gBACjBJ,OAAA,CAAAE,SAAA;UAAAe,QAAA,GAAE,2BACO,EAACO,MAAM,CAACC,QAAQ,EAAC,IAAE,EAACD,MAAM,CAACE,QAAQ,EAAC,UAAG,EAACF,MAAM,CAACG,MAAM,EAAC,oCAAS,EAAC,IAAIC,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAC,GAC7H;QAAA,eAAE,CAAC,gBAEH9B,OAAA,CAAAE,SAAA;UAAAe,QAAA,GAAE,2BACO,EAACO,MAAM,CAACC,QAAQ,EAAC,IAAE,EAACD,MAAM,CAACO,aAAa,EAAC,UAAG,EAACP,MAAM,CAACQ,WAAW,EAAC,0CAAU,EAAC,IAAIJ,IAAI,CAACJ,MAAM,CAACS,WAAW,CAAC,CAACH,kBAAkB,CAAC,CAAC,EAAC,GACtI;QAAA,eAAE;MACL,GATIN,MAAM,CAACC,QAAQ;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUpB,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChB,EAAA,CA5CIF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}